{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar _jsxFileName = \"C:\\\\Users\\\\fverz\\\\Documents\\\\myProjects\\\\vlust-hosting\\\\src\\\\components\\\\Looks\\\\Look.js\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport './Look.css';\nimport firebase from '../../../lib/init-firebase';\nimport Modal from '../UI/Modal/Modal';\nimport Link from 'next/link';\nimport image from '../../images/favicon.png';\nimport lazyImage from '../../images/gray.jpg';\nimport { LazyImage } from \"react-lazy-images\";\n\nconst Look = props => {\n  const {\n    0: modal,\n    1: setModal\n  } = useState(false);\n\n  const fetchVote = async id => {\n    const res = await fetch(`https://the-v-lust.firebaseio.com/votes/${id}.json`);\n    const json = await res.json();\n    let jsonVotes = 0;\n    json ? jsonVotes = json.votes : jsonVotes = 0;\n    let newVote = jsonVotes + 1;\n    return new _Promise(resolve => {\n      resolve(firebase.database().ref('votes/' + id).set({\n        pictureId: id,\n        votes: newVote\n      }));\n    });\n  };\n\n  const voting = async commonId => {\n    await fetchVote(commonId);\n    setModal(true);\n  };\n\n  let url = props.url;\n\n  if (url.startsWith('http')) {\n    url;\n  } else {\n    url = 'http://' + url;\n  }\n\n  return __jsx(\"div\", {\n    className: \"event\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, __jsx(Modal, {\n    show: modal,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    className: \"ModalText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, \"Thank you for voting!\"), __jsx(Link, {\n    href: \"/results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, __jsx(\"img\", {\n    src: image,\n    className: \"ModalImage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  })), __jsx(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }), __jsx(Link, {\n    href: \"/results\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Check out who's winning!\")), __jsx(\"div\", {\n    className: \"look\",\n    onClick: commonId => voting(props.id),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, __jsx(LazyImage, {\n    src: props.image,\n    alt: \"LOOK\",\n    placeholder: ({\n      imageProps,\n      ref\n    }) => __jsx(\"img\", {\n      ref: ref,\n      className: \"image\",\n      src: lazyImage,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      alt: imageProps.alt,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }),\n    actual: ({\n      imageProps\n    }) => __jsx(\"img\", _extends({\n      className: \"image\"\n    }, imageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 56\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }), __jsx(\"p\", {\n    className: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }, props.name.toUpperCase())));\n};\n\nexport default Look;","map":{"version":3,"sources":["C:\\Users\\fverz\\Documents\\myProjects\\vlust-hosting\\src\\components\\Looks\\Look.js"],"names":["React","useState","useEffect","firebase","Modal","Link","image","lazyImage","LazyImage","Look","props","modal","setModal","fetchVote","id","res","fetch","json","jsonVotes","votes","newVote","resolve","database","ref","set","pictureId","voting","commonId","url","startsWith","imageProps","width","height","alt","name","toUpperCase"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react'\r\n\r\nimport './Look.css'\r\nimport firebase from '../../../lib/init-firebase'\r\nimport Modal from '../UI/Modal/Modal'\r\nimport Link from 'next/link'\r\nimport image from '../../images/favicon.png'\r\nimport lazyImage from '../../images/gray.jpg'\r\nimport { LazyImage } from \"react-lazy-images\"\r\n\r\n\r\nconst Look = (props) => {\r\n    const [modal, setModal] = useState(false)\r\n\r\n    const fetchVote = async (id) => {\r\n        const res = await fetch(`https://the-v-lust.firebaseio.com/votes/${id}.json`)\r\n        const json = await res.json()\r\n        let jsonVotes = 0\r\n        json ? jsonVotes = json.votes : jsonVotes = 0\r\n        let newVote = jsonVotes + 1\r\n        return new Promise((resolve) => {\r\n                resolve(firebase.database().ref('votes/' + id).set({\r\n                    pictureId: id,\r\n                    votes: newVote,\r\n                }))\r\n            })\r\n     }\r\n\r\n    const voting = async (commonId) => {\r\n        await fetchVote(commonId)\r\n        setModal(true)\r\n    }\r\n\r\n    let url = props.url\r\n    if (url.startsWith('http')) {\r\n        url\r\n    } else {\r\n        url = 'http://' + url \r\n    }\r\n\r\n    return (           \r\n        <div className=\"event\">\r\n            <Modal show={modal}>\r\n            <p className=\"ModalText\">Thank you for voting!</p>\r\n            <Link href='/results'><img src={image} className=\"ModalImage\"/></Link>\r\n            <br/>\r\n            <Link href='/results'>Check out who's winning!</Link>\r\n            </Modal>\r\n            <div  className=\"look\" onClick={(commonId) => voting(props.id)}>\r\n                    <LazyImage \r\n                        src={props.image}\r\n                        alt=\"LOOK\"\r\n                        placeholder={({ imageProps, ref }) => (\r\n                            <img ref={ref} className=\"image\"  src={lazyImage} style={{width: '100%', height: '100%'}} alt={imageProps.alt} />\r\n                          )} \r\n                        actual={({ imageProps }) => <img className=\"image\" {...imageProps} />} />\r\n                    <p className=\"text\">{(props.name).toUpperCase()}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Look\r\n\r\n"]},"metadata":{},"sourceType":"module"}