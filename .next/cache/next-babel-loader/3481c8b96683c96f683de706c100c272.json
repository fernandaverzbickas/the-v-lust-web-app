{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport './Look.css';\nimport firebase from '../../../lib/init-firebase';\nimport Modal from '../UI/Modal/Modal';\nimport Link from 'next/link';\nimport image from '../../images/favicon.png';\nimport lazyImage from '../../images/gray.jpg';\nimport { LazyImage } from \"react-lazy-images\";\n\nvar Look = function Look(props) {\n  var _useState = useState(false),\n      modal = _useState[0],\n      setModal = _useState[1];\n\n  var fetchVote =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee(id) {\n      var res, json, jsonVotes, newVote;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetch(\"https://the-v-lust.firebaseio.com/votes/\".concat(id, \".json\"));\n\n            case 2:\n              res = _context.sent;\n              _context.next = 5;\n              return res.json();\n\n            case 5:\n              json = _context.sent;\n              jsonVotes = 0;\n              json ? jsonVotes = json.votes : jsonVotes = 0;\n              newVote = jsonVotes + 1;\n              return _context.abrupt(\"return\", new _Promise(function (resolve) {\n                resolve(firebase.database().ref('votes/' + id).set({\n                  pictureId: id,\n                  votes: newVote\n                }));\n              }));\n\n            case 10:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function fetchVote(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var voting =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(commonId) {\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchVote(commonId);\n\n            case 2:\n              setModal(true);\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function voting(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  var url = props.url;\n\n  if (url.startsWith('http')) {\n    url;\n  } else {\n    url = 'http://' + url;\n  }\n\n  return __jsx(\"div\", {\n    className: \"event\"\n  }, __jsx(Modal, {\n    show: modal\n  }, __jsx(\"p\", {\n    className: \"ModalText\"\n  }, \"Thank you for voting!\"), __jsx(Link, {\n    href: \"/results\"\n  }, __jsx(\"img\", {\n    src: image,\n    className: \"ModalImage\"\n  })), __jsx(\"br\", null), __jsx(Link, {\n    href: \"/results\"\n  }, \"Check out who's winning!\")), __jsx(\"div\", {\n    className: \"look\",\n    onClick: function onClick(commonId) {\n      return voting(props.id);\n    }\n  }, __jsx(LazyImage, {\n    src: props.image,\n    alt: \"LOOK\",\n    placeholder: function placeholder(_ref3) {\n      var imageProps = _ref3.imageProps,\n          ref = _ref3.ref;\n      return __jsx(\"img\", {\n        ref: ref,\n        className: \"image\",\n        src: lazyImage,\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        alt: imageProps.alt\n      });\n    },\n    actual: function actual(_ref4) {\n      var imageProps = _ref4.imageProps;\n      return __jsx(\"img\", _extends({\n        className: \"image\"\n      }, imageProps));\n    }\n  }), __jsx(\"p\", {\n    className: \"text\"\n  }, props.name.toUpperCase())));\n};\n\nexport default Look;","map":null,"metadata":{},"sourceType":"module"}