{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport './SubmitForm.css';\nimport Input from '../UI/Input/Input';\nimport Button from '../UI/Button/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport firebase from '../../../lib/init-firebase';\nimport { useRouter } from 'next/router';\n\nconst SubmitForm = props => {\n  const {\n    0: lookForm,\n    1: setLookForm\n  } = useState({\n    storeName: {\n      label: \"STORE'S NAME\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeUrl: {\n      label: \"WEBSITE\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'url',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeEmail: {\n      label: \"EMAIL\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeLook: {\n      label: \"CHOOSE LOOK\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'file'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    }\n  });\n  const {\n    0: formIsValid,\n    1: setFormIsValid\n  } = useState(false);\n  const {\n    0: url,\n    1: setUrl\n  } = useState('');\n  const {\n    0: loading,\n    1: setLoading\n  } = useState(false);\n  const {\n    0: submitting,\n    1: setSubmitting\n  } = useState(false);\n  const router = useRouter();\n  const formElementsArray = [];\n\n  for (let key in lookForm) {\n    formElementsArray.push({\n      id: key,\n      config: lookForm[key]\n    });\n  }\n\n  const handleUpload = imageFile => {\n    let file = imageFile;\n\n    if (file !== undefined) {\n      setLoading(true);\n      const storageRef = firebase.storage().ref(`images/${file.name}`);\n      storageRef.put(file).then(function (snapshot) {\n        setUrl('');\n        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      }).then(function () {\n        storageRef.getDownloadURL().then(function (downloadURL) {\n          setUrl(downloadURL);\n          setLoading(false);\n        });\n      });\n    }\n\n    file ? null : setUrl('');\n  };\n\n  const inputChangedHandler = (event, inputIdentifier) => {\n    let updatedFormElement = updateObject(lookForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, lookForm[inputIdentifier].elementConfig.type),\n      touched: true\n    });\n\n    if (lookForm[inputIdentifier].elementConfig.type === \"file\") {\n      let file = event.target.files[0];\n      handleUpload(file);\n      updatedFormElement = updateObject(lookForm[inputIdentifier], {\n        value: url,\n        valid: checkValidity(event.target.value, lookForm[inputIdentifier].elementConfig.type),\n        touched: true\n      });\n    }\n\n    const updatedLookForm = updateObject(lookForm, {\n      [inputIdentifier]: updatedFormElement\n    });\n    setLookForm(updatedLookForm);\n  };\n\n  const enablingSubmit = () => {\n    let formIsValid = true;\n\n    for (let inputIdentifier in lookForm) {\n      let validation = lookForm[inputIdentifier].valid && url.length > 1 && formIsValid;\n      formIsValid = validation;\n    }\n\n    setFormIsValid(formIsValid);\n  };\n\n  useEffect(() => {\n    enablingSubmit();\n  }, [url.length && lookForm.storeName.valid && lookForm.storeUrl.valid && lookForm.storeEmail.valid]);\n\n  const writeData = () => {\n    setSubmitting(true);\n    let cutEmail = lookForm.storeEmail.value.search(\"@\");\n    let storeEmail = lookForm.storeEmail.value.slice(0, cutEmail);\n    return new _Promise(resolve => {\n      resolve(firebase.database().ref('looks/' + storeEmail + _Date$now()).set({\n        name: lookForm.storeName.value,\n        url: lookForm.storeUrl.value,\n        email: lookForm.storeEmail.value,\n        imageUrl: url\n      }));\n    });\n  };\n\n  const returnToMain = async () => {\n    await writeData();\n    router.push(\"/\");\n  };\n\n  let form = __jsx(\"div\", {\n    id: \"myForm\"\n  }, __jsx(\"p\", {\n    style: ({\n      fontSize: '16px'\n    }, {\n      textAlign: 'center'\n    })\n  }, \"IN THE FASHION BUSINESS? \", __jsx(\"br\", null), \"SUBMIT A LOOK AND COMPETE!\"), formElementsArray.map(formElement => __jsx(Input, {\n    key: formElement.id,\n    label: formElement.config.label,\n    elementType: formElement.config.elementType,\n    elementConfig: formElement.config.elementConfig //value={formElement.config.value}\n    ,\n    invalid: !formElement.config.valid,\n    shouldValidate: formElement.config.validation,\n    touched: formElement.config.touched,\n    url: url,\n    loading: loading,\n    changed: event => inputChangedHandler(event, formElement.id, formElement.config.elementConfig.type)\n  })), loading === true && lookForm.storeLook.valid === true ? __jsx(Spinner, null) : null, lookForm.storeLook.url !== undefined || lookForm.storeLook.valid === true ? __jsx(\"img\", {\n    src: url,\n    width: \"280px\"\n  }) : null, lookForm.storeLook.touched === true && lookForm.storeLook.valid === false ? __jsx(\"p\", {\n    style: {\n      color: 'red'\n    }\n  }, \"PLEASE SELECT AN IMAGE FILE\") : null, __jsx(\"br\", null), __jsx(Button, {\n    disabled: !formIsValid,\n    clicked: returnToMain\n  }, \"SUBMIT\"), submitting ? __jsx(Spinner, null) : null);\n\n  return __jsx(\"div\", {\n    className: \"submitForm\"\n  }, form);\n};\n\nexport default SubmitForm;","map":null,"metadata":{},"sourceType":"module"}