{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport './Look.css';\nimport firebase from '../../../lib/init-firebase';\nimport Modal from '../UI/Modal/Modal';\nimport Link from 'next/link';\nimport image from '../../images/favicon.png';\nimport lazyImage from '../../images/gray.jpg';\nimport { LazyImage } from \"react-lazy-images\";\n\nconst Look = props => {\n  const {\n    0: modal,\n    1: setModal\n  } = useState(false);\n\n  const fetchVote = async id => {\n    const res = await fetch(`https://the-v-lust.firebaseio.com/votes/${id}.json`);\n    const json = await res.json();\n    let jsonVotes = 0;\n    json ? jsonVotes = json.votes : jsonVotes = 0;\n    let newVote = jsonVotes + 1;\n    return new _Promise(resolve => {\n      resolve(firebase.database().ref('votes/' + id).set({\n        pictureId: id,\n        votes: newVote\n      }));\n    });\n  };\n\n  const voting = async commonId => {\n    await fetchVote(commonId);\n    setModal(true);\n  };\n\n  let url = props.url;\n\n  if (url.startsWith('http')) {\n    url;\n  } else {\n    url = 'http://' + url;\n  }\n\n  return __jsx(\"div\", {\n    className: \"event\"\n  }, __jsx(Modal, {\n    show: modal\n  }, __jsx(\"p\", {\n    className: \"ModalText\"\n  }, \"Thank you for voting!\"), __jsx(Link, {\n    href: \"/results\"\n  }, __jsx(\"img\", {\n    src: image,\n    className: \"ModalImage\"\n  })), __jsx(\"br\", null), __jsx(Link, {\n    href: \"/results\"\n  }, \"Check out who's winning!\")), __jsx(\"div\", {\n    className: \"look\",\n    onClick: commonId => voting(props.id)\n  }, __jsx(LazyImage, {\n    src: props.image,\n    alt: \"LOOK\",\n    placeholder: ({\n      imageProps,\n      ref\n    }) => __jsx(\"img\", {\n      ref: ref,\n      className: \"image\",\n      src: lazyImage,\n      style: {\n        width: '100%',\n        height: '100%'\n      },\n      alt: imageProps.alt\n    }),\n    actual: ({\n      imageProps\n    }) => __jsx(\"img\", _extends({\n      className: \"image\"\n    }, imageProps))\n  }), __jsx(\"p\", {\n    className: \"text\"\n  }, props.name.toUpperCase())));\n};\n\nexport default Look;","map":null,"metadata":{},"sourceType":"module"}