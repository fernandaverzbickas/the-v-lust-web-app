{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _Promise from \"@babel/runtime-corejs2/core-js/promise\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\nimport React, { useState, useEffect } from 'react';\nimport './SubmitForm.css';\nimport Input from '../UI/Input/Input';\nimport Button from '../UI/Button/Button';\nimport Spinner from '../UI/Spinner/Spinner';\nimport { updateObject, checkValidity } from '../../shared/utility';\nimport firebase from '../../../lib/init-firebase';\nimport { useRouter } from 'next/router';\n\nvar SubmitForm = function SubmitForm(props) {\n  var _useState = useState({\n    storeName: {\n      label: \"STORE'S NAME\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'text',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeUrl: {\n      label: \"WEBSITE\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'url',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeEmail: {\n      label: \"EMAIL\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'email',\n        placeholder: \"\"\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    },\n    storeLook: {\n      label: \"CHOOSE LOOK\",\n      elementType: 'input',\n      elementConfig: {\n        type: 'file'\n      },\n      value: '',\n      validation: {\n        required: true\n      },\n      valid: false,\n      touched: false\n    }\n  }),\n      lookForm = _useState[0],\n      setLookForm = _useState[1];\n\n  var _useState2 = useState(false),\n      formIsValid = _useState2[0],\n      setFormIsValid = _useState2[1];\n\n  var _useState3 = useState(''),\n      url = _useState3[0],\n      setUrl = _useState3[1];\n\n  var _useState4 = useState(false),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(false),\n      submitting = _useState5[0],\n      setSubmitting = _useState5[1];\n\n  var router = useRouter();\n  var formElementsArray = [];\n\n  for (var key in lookForm) {\n    formElementsArray.push({\n      id: key,\n      config: lookForm[key]\n    });\n  }\n\n  var handleUpload = function handleUpload(imageFile) {\n    var file = imageFile;\n\n    if (file !== undefined) {\n      setLoading(true);\n      var storageRef = firebase.storage().ref(\"images/\".concat(file.name));\n      storageRef.put(file).then(function (snapshot) {\n        setUrl('');\n        var progress = snapshot.bytesTransferred / snapshot.totalBytes * 100;\n      }).then(function () {\n        storageRef.getDownloadURL().then(function (downloadURL) {\n          setUrl(downloadURL);\n          setLoading(false);\n        });\n      });\n    }\n\n    file ? null : setUrl('');\n  };\n\n  var inputChangedHandler = function inputChangedHandler(event, inputIdentifier) {\n    var updatedFormElement = updateObject(lookForm[inputIdentifier], {\n      value: event.target.value,\n      valid: checkValidity(event.target.value, lookForm[inputIdentifier].elementConfig.type),\n      touched: true\n    });\n\n    if (lookForm[inputIdentifier].elementConfig.type === \"file\") {\n      var file = event.target.files[0];\n      handleUpload(file);\n      updatedFormElement = updateObject(lookForm[inputIdentifier], {\n        value: url,\n        valid: checkValidity(event.target.value, lookForm[inputIdentifier].elementConfig.type),\n        touched: true\n      });\n    }\n\n    var updatedLookForm = updateObject(lookForm, _defineProperty({}, inputIdentifier, updatedFormElement));\n    setLookForm(updatedLookForm);\n  };\n\n  var enablingSubmit = function enablingSubmit() {\n    var formIsValid = true;\n\n    for (var inputIdentifier in lookForm) {\n      var validation = lookForm[inputIdentifier].valid && url.length > 1 && formIsValid;\n      formIsValid = validation;\n    }\n\n    setFormIsValid(formIsValid);\n  };\n\n  useEffect(function () {\n    enablingSubmit();\n  }, [url.length && lookForm.storeName.valid && lookForm.storeUrl.valid && lookForm.storeEmail.valid]);\n\n  var writeData = function writeData() {\n    setSubmitting(true);\n    var cutEmail = lookForm.storeEmail.value.search(\"@\");\n    var storeEmail = lookForm.storeEmail.value.slice(0, cutEmail);\n    return new _Promise(function (resolve) {\n      resolve(firebase.database().ref('looks/' + storeEmail + _Date$now()).set({\n        name: lookForm.storeName.value,\n        url: lookForm.storeUrl.value,\n        email: lookForm.storeEmail.value,\n        imageUrl: url\n      }));\n    });\n  };\n\n  var returnToMain =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return writeData();\n\n            case 2:\n              router.push(\"/\");\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function returnToMain() {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  var form = __jsx(\"div\", {\n    id: \"myForm\"\n  }, __jsx(\"p\", {\n    style: ({\n      fontSize: '16px'\n    }, {\n      textAlign: 'center'\n    })\n  }, \"IN THE FASHION BUSINESS? \", __jsx(\"br\", null), \"SUBMIT A LOOK AND COMPETE!\"), formElementsArray.map(function (formElement) {\n    return __jsx(Input, {\n      key: formElement.id,\n      label: formElement.config.label,\n      elementType: formElement.config.elementType,\n      elementConfig: formElement.config.elementConfig //value={formElement.config.value}\n      ,\n      invalid: !formElement.config.valid,\n      shouldValidate: formElement.config.validation,\n      touched: formElement.config.touched,\n      url: url,\n      loading: loading,\n      changed: function changed(event) {\n        return inputChangedHandler(event, formElement.id, formElement.config.elementConfig.type);\n      }\n    });\n  }), loading === true && lookForm.storeLook.valid === true ? __jsx(Spinner, null) : null, lookForm.storeLook.url !== undefined || lookForm.storeLook.valid === true ? __jsx(\"img\", {\n    src: url,\n    width: \"280px\"\n  }) : null, lookForm.storeLook.touched === true && lookForm.storeLook.valid === false ? __jsx(\"p\", {\n    style: {\n      color: 'red'\n    }\n  }, \"PLEASE SELECT AN IMAGE FILE\") : null, __jsx(\"br\", null), __jsx(Button, {\n    disabled: !formIsValid,\n    clicked: returnToMain\n  }, \"SUBMIT\"), submitting ? __jsx(Spinner, null) : null);\n\n  return __jsx(\"div\", {\n    className: \"submitForm\"\n  }, form);\n};\n\nexport default SubmitForm;","map":null,"metadata":{},"sourceType":"module"}